datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // binaryTargets   = ["native", "linux-arm64-openssl-1.1.x", "linux-arm64-openssl-3.0.x"]
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "../common/schemas/generated"
  useMultipleFiles = false
  createModelTypes = true
  // Useful for input validation but might affect performance since outputed file is huge
  // createInputTypes       = true
  // addInputTypeValidation = true
  // createOptionalDefaultValuesTypes = false

  createInputTypes         = false // default is true
  addInputTypeValidation   = false // default is true
  addIncludeType           = false // default is true
  addSelectType            = false // default is true
  validateWhereUniqueInput = false // default is true
}

model User {
  id         String    @id @default(cuid()) @db.Text
  /// externalId is used to link the user to an external system
  externalId String?
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime  @updatedAt @db.Timestamptz(6)
  deletedAt  DateTime? @db.Timestamptz(6)

  name String

  walletAddress String @unique

  email         String
  emailVerified Boolean @default(false)

  image String?

  // registrationStep  RegistrationStep        @default(REGISTRATION_NEW_ACCOUNT)
  // isSiwe           Boolean            @default(false)

  profile    Profile?
  sales      Sale[]
  // isEmailVerify     EmailVerificationStatus @default(NOTVERIFIED)
  userRole   UserRole[]
  auditTrail AuditTrail[]

  kycVerification KycVerification?
  sessions        Session[]
  // accounts        Account[]

  transactions         SaleTransactions[] @relation("UserTransactions")
  transactionApprovals SaleTransactions[] @relation("TransactionApprovals")
  Document             Document[]

  isSiwe            Boolean?
  DocumentRecipient DocumentRecipient[]
  EmailVerification EmailVerification?

  @@map("users")
}

model EmailVerification {
  id        String   @id @default(cuid()) @db.Text
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  expiredAt DateTime @default(dbgenerated("NOW() + interval '3 hour'"))

  email  String
  token  String
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  @@map("email_verification")
}

// model WalletAddress {
//   createdAt DateTime  @default(now()) @db.Timestamptz(6)
//   updatedAt DateTime  @updatedAt @db.Timestamptz(6)
//   deletedAt DateTime? @db.Timestamptz(6)

//   address       User   @relation(fields: [walletAddress], references: [walletAddress], onDelete: Cascade)
//   walletAddress String
//   chainId       Int

//   @@unique([walletAddress, chainId])
// }

model Session {
  id        String   @id @default(cuid()) @db.Text
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  expiresAt DateTime
  // hashed jwt
  token     String   @unique
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token, userId])
  @@map("session")
}

/// Not needed for now since we are not using better auth
// model Account {
//   id        String   @id @default(cuid()) @db.Text
//   createdAt DateTime @default(now()) @db.Timestamptz(6)
//   updatedAt DateTime @updatedAt @db.Timestamptz(6)

//   accountId             String
//   providerId            String
//   userId                String
//   user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   accessToken           String?
//   refreshToken          String?
//   idToken               String?
//   accessTokenExpiresAt  DateTime?
//   refreshTokenExpiresAt DateTime?
//   scope                 String?
//   password              String?

//   @@map("account")
// }

model Verification {
  id        String   @id @default(cuid()) @db.Text
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  expiresAt DateTime

  identifier String
  value      String

  @@map("verification")
}

model Profile {
  id        String    @id @default(cuid()) @db.Text
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)
  deletedAt DateTime? @db.Timestamptz(6)

  firstName String?
  lastName  String?
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @unique

  address     Address?
  phoneNumber String?
  dateOfBirth DateTime?

  @@map("profile")
}

model Address {
  id        String    @id @default(cuid()) @db.Text
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)
  deletedAt DateTime? @db.Timestamptz(6)

  profile          Profile? @relation(fields: [userId], references: [userId])
  userId           String   @unique
  city             String?
  zipCode          String?
  country          String?
  state            String?
  street           String?
  formattedAddress String?
  latitude         Float?
  longitude        Float?

  @@map("address")
}

model Sale {
  id        String    @id @default(cuid()) @db.Text
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)
  deletedAt DateTime? @db.Timestamptz(6)

  name        String
  catchPhrase String?
  banner      Document? @relation(fields: [bannerId], references: [id], name: "banner")
  bannerId    String?   @unique

  status                 SaleStatus    @default(CREATED)
  saleCurrency           Currency      @relation(fields: [currency], references: [symbol])
  currency               String
  initialTokenQuantity   Int
  availableTokenQuantity Int
  maximumTokenBuyPerUser Int?
  minimumTokenBuyPerUser Int           @default(1)
  saleStartDate          DateTime
  tokenContractAddress   String?
  tokenContractChainId   Int?
  blockchain             Blockchain?   @relation(fields: [tokenContractChainId], references: [chainId])
  token                  Token         @relation(fields: [tokenId, tokenSymbol], references: [id, symbol])
  tokenId                String
  tokenName              String
  tokenSymbol            String
  tokenTotalSupply       String?
  tokenPricePerUnit      Decimal       @db.Decimal(36, 18)
  /// Used to compare calculate bonus gains comparing tokenPPU against this value
  comparisonPricePerUnit Decimal?      @db.Decimal(36, 18)
  toWalletsAddress       String
  saleClosingDate        DateTime
  createdBy              String
  saftCheckbox           Boolean       @default(false)
  /// Check to add if the sale requires upload of KYC documents
  requiresKYC            Boolean       @default(false)
  saftContract           SaftContract?
  information            Json?

  user         User               @relation(fields: [createdBy], references: [id])
  transactions SaleTransactions[]
  documents    Document[]         @relation("sale")

  vestingSchedules VestingSchedule[]
  banks            BankDetails[]

  @@map("sales")
}

/**
 * SaftContract model with versioning support.
 * - All versions are stored in this table.
 * - parentId: null for the original (v1), set to original id for subsequent versions.
 * - isLatest: true for the latest version, false for previous versions.
 * - Sale points to the latest version only.
 */
model SaftContract {
  id        String    @id @default(cuid()) @db.Text
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)
  deletedAt DateTime? @db.Timestamptz(6)

  name        String
  description String?
  /// For File types
  url         String?
  /// Text content for TEXT type
  content     Json?
  /// Variables for TEXT type
  variables   Json[]

  recipients DocumentRecipient[]

  version   Int     @default(1)
  parentId  String? // Points to the original contract (null for v1)
  isCurrent Boolean @default(true)

  /// latest contract should always have a saleId to which is related
  Sale   Sale?   @relation(fields: [saleId], references: [id])
  saleId String? @unique

  @@unique([parentId, version]) // Ensures no duplicate version per parent
  @@map("saft_contract")
}

model DocumentRecipient {
  id        String    @id @default(cuid()) @db.Text
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)
  deletedAt DateTime? @db.Timestamptz(6)

  fullname     String?
  email        String
  role         SignableDocumentRole    @default(SIGNER)
  status       DocumentSignatureStatus @default(CREATED)
  signatureUrl String?
  externalId   Int?
  /// Storage key for the signed document in bucket
  storageKey   String?

  user    User?   @relation(fields: [address], references: [walletAddress])
  address String?

  SaftContract   SaftContract? @relation(fields: [saftContractId], references: [id])
  saftContractId String?       @db.Text

  SaleTransactions SaleTransactions?

  @@index([email])
  @@index([address, saftContractId])
  @@map("signable_document_recipient")
}

enum SignableDocumentRole {
  CC
  SIGNER
  VIEWER
  APPROVER

  @@map("signable_document_role")
}

enum DocumentSignatureStatus {
  CREATED
  SENT_FOR_SIGNATURE
  WAITING_FOR_COUNTERPARTY
  SIGNED
  EXPIRED
  REJECTED
  OPENED
  ERROR

  @@map("document_signature_status")
}

model Document {
  id        String    @id @default(cuid()) @db.Text
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)
  deletedAt DateTime? @db.Timestamptz(6)

  name     String
  fileName String
  url      String
  /// MIME type of the file
  type     String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  sale   Sale?   @relation(fields: [saleId], references: [id], name: "sale")
  saleId String?

  saleBanner Sale? @relation("banner")

  kycVerification   KycVerification? @relation("KycDocuments", fields: [kycVerificationId], references: [id])
  kycVerificationId String?

  SaleTransactions SaleTransactions?

  @@unique([id, url])
  @@map("documents")
}

model VestingSchedule {
  id        String    @id @default(cuid()) @db.Text
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)
  deletedAt DateTime? @db.Timestamptz(6)

  saleId           String
  sale             Sale    @relation(fields: [saleId], references: [id])
  name             String
  cliffPeriod      Int // in days
  vestingPeriod    Int // in days
  releaseFrequency Int // in days
  initialRelease   Float // percentage
  isEnabled        Boolean @default(true)

  @@map("vesting_schedules")
}

model TokenDistribution {
  id        String    @id @default(cuid()) @db.Text
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)
  deletedAt DateTime? @db.Timestamptz(6)

  transactionId    String
  transaction      SaleTransactions @relation(fields: [transactionId], references: [id])
  amount           String
  distributionDate DateTime
  txHash           String?
  status           String

  @@map("token_distributions")
}

model SaleTransactions {
  id        String    @id @default(cuid()) @db.Text
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)
  deletedAt DateTime? @db.Timestamptz(6)

  tokenSymbol String

  /// Number of tokens purchased in the transaction
  quantity    Decimal @db.Decimal(36, 18)
  /// Store exact price per unit as string
  rawPrice    String
  /// Price per unit of the token as Decimal (Optimized for crypto)
  price       Decimal @db.Decimal(36, 18)
  /// Total amount to be paid by the user
  totalAmount Decimal @db.Decimal(36, 18)

  formOfPayment   FOP
  // confirmationId  String?
  receivingWallet String?

  status TransactionStatus @default(PENDING)
  user   User              @relation("UserTransactions", fields: [userId], references: [id])
  userId String

  sale   Sale   @relation(fields: [saleId], references: [id])
  saleId String

  comment String?

  /// actual amount transfered by the user after confirmation
  amountPaid         String?
  amountPaidCurrency Currency @relation(fields: [paidCurrency], references: [symbol])
  paidCurrency       String

  txHash     String?
  blockchain Blockchain? @relation(fields: [blockchainId], references: [id])

  blockchainId String?

  agreement   DocumentRecipient? @relation(fields: [agreementId], references: [id])
  agreementId String?            @unique

  approvedBy String?
  approver   User?   @relation("TransactionApprovals", fields: [approvedBy], references: [id])

  rejectionReason String?

  paymentEvidence   Document? @relation(fields: [paymentEvidenceId], references: [id])
  paymentEvidenceId String?   @unique

  paymentDate DateTime?

  auditTrail         AuditTrail[]
  tokenDistributions TokenDistribution[]

  @@map("sales_transactions")
}

model Blockchain {
  id        String    @id @default(cuid()) @db.Text
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)
  deletedAt DateTime? @db.Timestamptz(6)

  name        String
  chainId     Int     @unique
  rpcUrl      String
  explorerUrl String?

  isTestnet Boolean @default(false)
  isEnabled Boolean @default(true)

  transactions        SaleTransactions[]
  TokensOnBlockchains TokensOnBlockchains[]
  Sale                Sale[]

  @@unique([id, chainId])
  @@map("blockchain")
}

model ContractStatus {
  id        String    @id @default(cuid()) @db.Text
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)
  deletedAt DateTime? @db.Timestamptz(6)

  userId     String
  saleId     String
  contractId String
  status     ContractSignatureStatus

  @@unique([userId, contractId])
  @@map("contract_status")
}

model AuditTrail {
  id        String    @id @default(cuid()) @db.Text
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)
  deletedAt DateTime? @db.Timestamptz(6)

  /// Used if the action is linked to a transaction
  transactionId    String?
  transaction      SaleTransactions? @relation(fields: [transactionId], references: [id])
  actionType       String
  performer        User              @relation(fields: [performerAddress], references: [walletAddress])
  performerAddress String
  content          Json?
  comment          String?

  @@map("audit_trails")
}

model KycVerification {
  id        String    @id @default(cuid()) @db.Text
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)
  deletedAt DateTime? @db.Timestamptz(6)

  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  status          KycStatus @default(NOT_STARTED)
  verifiedAt      DateTime?
  rejectionReason String?

  documents Document[] @relation("KycDocuments")

  @@map("kyc_verifications")
}

model Role {
  id        String    @id @default(cuid()) @db.Text
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)
  deletedAt DateTime? @db.Timestamptz(6)

  name        String     @unique
  description String?
  users       UserRole[]

  @@map("roles")
}

model BankDetails {
  id        String    @id @default(cuid()) @db.Text
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)
  deletedAt DateTime? @db.Timestamptz(6)

  bankName    String
  accountName String?
  iban        String
  swift       String?
  address     String?
  memo        String?

  currency   Currency? @relation(fields: [currencyId], references: [id])
  currencyId String?
  sales      Sale[]

  @@map("bank_details")
}

model UserRole {
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)
  deletedAt DateTime? @db.Timestamptz(6)

  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model Token {
  id        String    @id @default(cuid()) @db.Text
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)
  deletedAt DateTime? @db.Timestamptz(6)

  symbol      String
  totalSupply String?
  image       String?

  sales               Sale[]
  TokensOnBlockchains TokensOnBlockchains[]

  @@unique([id, symbol])
  @@map("tokens")
}

model TokensOnBlockchains {
  id          String @id @default(cuid()) @db.Text
  token       Token  @relation(fields: [tokenId, tokenSymbol], references: [id, symbol])
  tokenId     String
  tokenSymbol String

  blockchain Blockchain @relation(fields: [chainId], references: [chainId])
  chainId    Int

  name            String
  isNative        Boolean @default(false)
  decimals        Int
  contractAddress String?

  @@unique([tokenId, chainId])
  @@unique([tokenSymbol, chainId])
  @@map("tokens_on_blockchains")
}

enum RegistrationStep {
  REGISTRATION_NEW_ACCOUNT
  REGISTRATION_PERSONAL_DETAIL
  REGISTRATION_DOCUMENT_DETAIL
  REGISTRATION_COMPLETED
}

enum FOP {
  CRYPTO
  TRANSFER
  CARD
}

enum SaleStatus {
  CREATED
  OPEN
  CLOSED
  FINISHED
}

model Currency {
  id        String    @id @default(cuid()) @db.Text
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)
  deletedAt DateTime? @db.Timestamptz(6)

  name   String
  symbol String       @unique
  type   CurrencyType

  Sale             Sale[]
  SaleTransactions SaleTransactions[]
  banks            BankDetails[]
}

enum CurrencyType {
  CRYPTO
  FIAT
}

// enum Currency {
//   CHF
//   GBP
//   USD
//   EUR
//   ETH
//   USDC
//   MATIC
//   LINK
//   BNB
// }

enum TransactionStatus {
  PENDING
  AWAITING_PAYMENT
  PAYMENT_SUBMITTED
  PAYMENT_VERIFIED
  REJECTED
  CANCELLED
  TOKENS_DISTRIBUTED
  COMPLETED
  REFUNDED
}

enum ContractSignatureStatus {
  PENDING
  SIGNED
}

enum EmailVerificationStatus {
  VERIFIED
  PENDING
  NOTVERIFIED
}

enum KycStatus {
  NOT_STARTED
  SUBMITTED
  VERIFIED
  REJECTED
}

// model Passkey {
//   id           String    @id
//   name         String?
//   publicKey    String
//   userId       String
//   user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   credentialID String
//   counter      Int
//   deviceType   String
//   backedUp     Boolean
//   transports   String?
//   createdAt    DateTime?

//   @@map("passkey")
// }
